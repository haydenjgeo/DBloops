% Description: The following code compares DBloops and the Random Forest/DBloops
% workflow to G3Point (Steer and Guerit et al., 2022) using parameters that
% provided best G3Point results. The first section tests clustering of only manually
% identified clast material, and the second section tests the full
% workflow. 
%
% Note: run this code from inside the G3Point folder for outputs to be placed in
% correct G3Point folder. 
%
% Outputs: Tiled layout with 2 figures comparing DBloops results to G3Point
%
% Revision: R2022a
% Author: Hayden Jacobson, Colorado School of Mines/USGS
% Date: October 2023


%% Clast material only (DBloops)
fcloud=readmatrix('FH_NoUndersized_AllFields.txt');
ccloud=fcloud(~isnan(fcloud(:,7)),[1 2 3 7]);%clast points with clast index, non-clast points have NaN index
c2cloud=ccloud(:,[1 2 3]);%clast points no index
gsdtrue = GetGSD(ccloud,99.5); %get GSD from indexed clast cloud 
dens=1500; %downsampling density 
[clouda, idx] = DownCloud(c2cloud,dens); %downsampled cloud
np=18; %number of points (corresponds to 'dens')
esfa=2.6; esfb=0.6; %epsilon scaling factors; optimization performed w/ these values
[ea, eb] = EstimateEpsilon(np, esfa, esfb, clouda); %get scaled epsilon values
[DBgsd1, cloudb, scsm, sc]=DBloops(gsdtrue,clouda,np,ea,eb,0); %Cluster

%% Get G3Point 
%modifications made to G3Point (Steer and Guerit et al., 2022):
%blocked out plotting code in G3Point.m to save time
%modified loadptCloud.m so computer dependent filepath not required
%updated parameter file 'param.csv' with best parameters from trial and error
%default parameters are saved in 'param - backup.csv'
%path name requiements removed from G3Point.m and defineparameters.m

%Create downsampled .ply version of clast only cloud
c2inds=randi(length(c2cloud),1000000,1);
pc=pointCloud(c2cloud(c2inds,:));
pcwrite(pc,'G3Point\\PointCloud\\Clasts1e7.ply')
%Run G3Point
G3GSD1=G3Point('Clasts1e7.ply');

%% Full workflow (Random forest classification, DBloops)
% fcloud=readmatrix('FH_NoUndersized_AllFields.txt'); %already loaded
% unless running only selected sections of script
load('Feat3.mat');
GV=load("GoodVars.mat");
GoodVars=GV.GoodVars;
%combine features from all sites
sitenums=[1:5]; %5 sites 
tempfeats=[feats{1};feats{2};feats{3};feats{4};feats{5}];
%set up featsB one field at a time
featsB.geom=[tempfeats(1).geom;tempfeats(2).geom;tempfeats(3).geom;tempfeats(4).geom;tempfeats(5).geom];
featsB.slope=[tempfeats(1).slope;tempfeats(2).slope;tempfeats(3).slope;tempfeats(4).slope;tempfeats(5).slope];
featsB.scan=[tempfeats(1).scan;tempfeats(2).scan;tempfeats(3).scan;tempfeats(4).scan;tempfeats(5).scan];
featsB.rough=[tempfeats(1).rough;tempfeats(2).rough;tempfeats(3).rough;tempfeats(4).rough;tempfeats(5).rough];
featsB.LABpoint=[tempfeats(1).LABpoint;tempfeats(2).LABpoint;tempfeats(3).LABpoint;tempfeats(4).LABpoint;tempfeats(5).LABpoint];
featsB.meanLAB=[tempfeats(1).meanLAB;tempfeats(2).meanLAB;tempfeats(3).meanLAB;tempfeats(4).meanLAB;tempfeats(5).meanLAB];
featsB.LABstd=[tempfeats(1).LABstd;tempfeats(2).LABstd;tempfeats(3).LABstd;tempfeats(4).LABstd;tempfeats(5).LABstd];
featsB.WaltonLAB=[tempfeats(1).WaltonLAB;tempfeats(2).WaltonLAB;tempfeats(3).WaltonLAB;tempfeats(4).WaltonLAB;tempfeats(5).WaltonLAB];
featsB.GLCM=[tempfeats(1).GLCM;tempfeats(2).GLCM;tempfeats(3).GLCM;tempfeats(4).GLCM;tempfeats(5).GLCM];
%no Berretta features desired for testing 
featsB.intensity=[tempfeats(1).intensity;tempfeats(2).intensity;tempfeats(3).intensity;tempfeats(4).intensity;tempfeats(5).intensity];
featsB.truth=[tempfeats(1).truth;tempfeats(2).truth;tempfeats(3).truth;tempfeats(4).truth;tempfeats(5).truth];
featsB.points=[tempfeats(1).points;tempfeats(2).points;tempfeats(3).points;tempfeats(4).points;tempfeats(5).points];%note 31125 corresponds to 3000 ppm^2 testing data (3750 ppm^2 before split)

numsamples=31125; %must be 50,000 or less - Feat3 contains 100k core points for 5 subregions, 50k matrix 50k clast
q=[1 50001 100001 150001 200001 250001 300001 350001 400001 450001];
tind=[];
for i=1:length(q)
    tinds=randi([q(i) q(i)+49999],1,numsamples);
    tind=[tind tinds];
end
%set testing fraction 
tsf=0.8;
q2=[0:10]*numsamples+1; %ten is number of sites*number of classes
train1=[];
test1=[];
for u=1:length(q)
    test2=tind(q2(u):(q2(u)+numsamples*tsf-1));
    train2=tind((q2(u)+numsamples*tsf):(q2(u+1)-1));
    train1=[train1 train2];
    test1=[test1 test2];
end
all = [featsB.geom,featsB.slope,featsB.intensity,featsB.meanLAB,featsB.LABstd,featsB.WaltonLAB,featsB.scan,featsB.rough,featsB.LABpoint,featsB.GLCM];
allt = featsB.truth;
x_test=all(test1,GoodVars);
x_train=all(train1,GoodVars);
y_test = allt(test1,:);
y_train = allt(train1,:);
test_points=featsB.points(test1,:);

rf = TreeBagger(30,x_train,y_train,'maxnumsplits',80);
[y_pred,score] = predict(rf,x_test); %prediction
y_prediction = str2double(y_pred); %accuracy evaluation
stats1 = confusionmatStats(y_test,y_prediction);
new_pred=zeros(length(y_pred),1); %decision split threshold 
threshold=0.65; %increase threshold to reduce false positives (false clasts) 
new_pred(find(score(:,1)<threshold))=1; %large value in column 1 indicates likely 0 class (clast)
stats = confusionmatStats(y_test,new_pred);

truepred = zeros(length(y_test),1);
for i=1:length(truepred);
  if y_test(i)==0 && new_pred(i)==0 %true positive 
        truepred(i)=1;%if rock=0 then this is true rock
  elseif y_test(i)==0 && new_pred(i)==1 %false negative 
        truepred(i)=3;%false soil 
  elseif y_test(i)==1 && new_pred(i)==0%false positive 
        truepred(i)=4;%false rock 
   elseif y_test(i)==1 && new_pred(i)==1 %true negative
        truepred(i)=2; %true soil
  end
end
newcloud=[test_points truepred]; %resulting cloud to be interpolated
ccloud=fcloud(~isnan(fcloud(:,7)),[1 2 3 7]);%clast points with clast index, non-clast points have NaN index
gsdtrue = GetGSD(ccloud,99.5);
interped=InterpLabel(fcloud,newcloud);
indtr =  find(interped(:,4) == 1); %true rock
indfr =  find(interped(:,4) == 4); %false rock
indr = [indtr; indfr]; %indexes of all rock in full cloud 
clastcloud = interped(indr,1:3); 
dens=1500;
[clouda, idx] = DownCloud(clastcloud,dens);
np=18; esfa=2.6; esfb=0.6; 
[ea, eb] = EstimateEpsilon(np, esfa, esfb, clouda); %must run on downsampled cloud 
[DBgsd2, cloudb, scsm, sc]=DBloops(gsdtrue,clouda,np,ea,eb,0);

%% Get G3Point
%Create downsampled .ply version of clast only cloud
c2inds=randi(length(fcloud),1000000,1);
pc=pointCloud(c2cloud(c2inds,:));
pcwrite(pc,'G3Point\\PointCloud\\Clasts1e7.ply')
%run G3Point
G3GSD2=G3Point('FH1e7.ply', 'C:\GSD code - Active\G3point\PointCloud\'); % path is specific to computer

%% save desired variables 
save F12_CompareG3DBloops.mat gsdtrue DBgsd1 G3GSD1 DBgsd2 G3GSD2

%% plot 
% load('F12_CompareG3DBloops.mat') %if you don't want to run the GSD code pieces 

%numclasts recognized = DB-1255/1113; G3-2108/3304, true 1340 

[f1,x1] = ecdf(gsdtrue);%ecdf for true data
[f2,x2] = ecdf(DBgsd1);
[f3,x3] = ecdf(G3GSD1);
[f4,x4] = ecdf(DBgsd2);
[f5,x5] = ecdf(G3GSD2);

f=figure;
f.Position = [0 0 900 600];
t=tiledlayout(2,1)
nexttile
stairs(x1,f1,'color','k','LineWidth',3);
hold on
stairs(x3,f3,'color',[0.8500 0.3250 0.0980],'LineWidth',3);
stairs(x2,f2,'color','b','LineWidth',3);
legend('True','G3Point','DBloops','fontsize',14)
title('Clast Points Only','fontsize',14)

nexttile
stairs(x1,f1,'color','k','LineWidth',3);
hold on
stairs(x5,f5,'color',[0.8500 0.3250 0.0980],'LineWidth',3);
stairs(x4,f4,'color','b','LineWidth',3);
title('Clast and Matrix Material','fontsize',14)

xlabel(t ,'Grain Diameter (m)','fontsize',16);
ylabel(t, 'Proportion Passing','fontsize',16);

annotation('textbox',...
    [0.145444444444444 0.85 0.0312222222222222 0.055],'String',{'A'},...
    'FontSize',14,...
    'FitBoxToText','off');

annotation('textbox',...
    [0.147666666666667 0.371666666666668 0.0312222222222222 0.0549999999999999],...
    'String','B',...
    'FontSize',14,...
    'FitBoxToText','off');


print('F12_CompareG3DBloops','-dpng')

